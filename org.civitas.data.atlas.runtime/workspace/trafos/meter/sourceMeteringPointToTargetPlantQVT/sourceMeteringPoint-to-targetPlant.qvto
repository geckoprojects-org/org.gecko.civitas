/**
 * Copyright (c) 2012 - 2025 Data In Motion and others.
 * All rights reserved. 
 * 
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *     Data In Motion - initial API and implementation
 */
modeltype ECORE "strict" uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype SOURCE uses "https://civitas.org/meter/source/1.0.0";
modeltype TARGET uses "https://civitas.org/meter/target/1.0.0";


transformation SourceMeteringPointToTargetPlant(in sourceMeteringPoint : SOURCE, out targetPlant : TARGET);

main() {
	sourceMeteringPoint.rootObjects()[SOURCE::IntermediateMeteringPoint] -> map toTargetPlant(); 
}

mapping SOURCE::IntermediateMeteringPoint::toTargetPlant(): TARGET::Plant {
	id := self.plantId;
	log("qqqqqqqqqqqqqqqq " + "SourceMeteringPointToTargetPlant " + id);
	meteringPoints += self.map toTargetMeteringPoint();
}

mapping SOURCE::IntermediateMeteringPoint::toTargetMeteringPoint(): TARGET::MeteringPoint {
	id := self.meterId;
	meterReadings += self.readings->map toTargetMeterReading();
}

mapping SOURCE::Reading::toTargetMeterReading(): TARGET::MeterReading {
	id := self.id.toString();
	value := self.value;
	timestamp := self.timestamp;
}
